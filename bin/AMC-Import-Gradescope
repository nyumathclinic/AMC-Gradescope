#!/usr/bin/env perl

=head1 NAME

AMC-import-gradescope - Import scores from a Gradescope score file to an AMC database

=head1 SYNOPSIS

    $ AMC-import-gradescope --project PROJECTDIR --qlist QNAME1 QNAME2 ... --amckey=AMCKEY --gskey=GSKEY [options] GSFILE

Import scores from GSFILE into the project at PROJECTDIR, joining records by
matching GSKEY to AMCKEY.  Assign the first problem in the scores file to
the AMC question with title QNAME1, the second to QNAME2, etc.

Positional argument:

    GSFILE      Gradescope scores file. (A CSV file downloaded from Gradescope)

Keyword arguments (needed):

    --amckey    Key in AMC names file on which to join records (default: C<_ID_>)
    --gskey     Key in Gradescope scores file on which to join records (default: SID)
    --project   directory of AMC project (default: current directory)
    --qlist     list of question titles, into which to import scores
    I<or>
    --qmap       hash of Gradescope question names to AMC question titles


Options

    --datadir   directory of AMC project data(defaults to C<%PROJET/data>)
    --verbose   be verbose to STDOUT (to be implemented)
    --debug     print lots of debugging statements to STDERR (to be implelemented)

    --          all done (use if --qlist or --qmap come before GSFILE)

=head1 DESCRIPTION

=head2 Configuration

The configuration file settings.cfg

=head1 COPYRIGHT

Copyright 2017.

Since AMC is GPL, I guess this package is, too.

No warranty!

=head1 AUTHOR

Matthew Leingang, leingang@nyu.edu

=cut

use Config::Any;
use Data::Dumper; # for debugging
use Getopt::Long;
use Pod::Usage;
use XML::Simple;
use Carp;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Gradescope::ScoresFile;
use AMC::Import::Gradescope;
use AMC::Basic;

my $project_dir = '.';
my $data_dir = '';
my $amc_key = '';
my $gs_key = '';
my $students_list = '';
my $debug, $verbose;
my $qlist=[];
my $qname_map={};

my $cfg = Config::Any->load_files({'files'=>['amc.ini']});
for (@$cfg) {
    my ($filename, $file_config) = %$_;
    next unless $filename eq 'amc.ini';
    while (my($program,$config) = each(%{$file_config})){
        next unless $program eq 'import-gradescope';
        $amc_key = $config->{'amckey'};
        $gs_key  = $config->{'gskey'};
        @question_list = split ',', $config->{'qlist'};
        $qlist   = \@question_list;
    }
}

GetOptions(
    'debug'=>\$debug,
    'verbose'=>\$verbose,
    'project=s'=>\$project_dir,
    'data=s'=>\$data_dir, # you'd only want to set this to overload the project option
    'students_list=s'=>\$students_list,
    'amckey=s'=>\$amc_key,
    'gskey=s'=>\$gs_key,
    'qlist=s@{1,}'=>$qlist,
    'qmap=s%{1,}'=>$qname_map,
    'help|?'=> sub { pod2usage(-verbose=>1, -exitval=>0) },
    'man'=> sub { pod2usage(-verbose=>2, -exitval=>0) },
    'show'=> sub { print dump_vars(); exit 0; }
) or pod2usage( -verbose => 1, -exitval => 1);

my $gs_path = shift(@ARGV);

croak("Scoresfile '$gs_path' does not exist") if (!-f $gs_path);

$project_options = read_project_options($project_dir);

# $data_dir can be specified on the command line.
# If not, the current project's options file is read for it.
# If still not, croak.
$data_dir = $project_options->{'data'} unless $data_dir;
if(! -d $data_dir) {
    croak ("Data directory '$data_dir' does not exist");
}
# student list
# If not specified on CL, look in options.xml
if (!-f $students_list) {
    $students_list=$project_options->{'listeetudiants'};
    $students_list =~ s/%HOME/$ENV{'HOME'}/;
}
# keys
if (!$amc_key) {
    $amc_key = '_ID_';
}
if (!gs_key) {
    $gs_key = 'SID';
}

# This does NOT save warning messages to a file 'debug.log'.
# It DOES suppress htem from going to STDOUT/STDERR, whch is useful
# since I'm getting many warnings.
# I really want to use Log::Message::Simple or Log::Log4Perl.
# set_debug('debug.log');


###
# if qmap DNE and qlist does, construct qmap
my $gs = Gradescope::ScoresFile::new($gs_path);
if (!%$qname_map && @$qlist) {
    my @gs_qnames = $gs->question_heads;
    my @amc_qnames = @$qlist;
    my %hash;
    @hash{@gs_qnames} = @amc_qnames;
    print Dumper("hash: ", %hash);
    $qname_map = \%hash;
}

print "qname_map: ",  Dumper($qname_map);

croak("No questions to import") if !keys(%$qname_map);


my $importer = AMC::Import::Gradescope->new('datadir'=>$data_dir,'students_list'=>$students_list);
exit($importer->do_import($gs, $amc_key, $gs_key, $qname_map));


####
# This stuff should probably go in a separate package
# Or maybe use Config::Any
sub read_project_options {
    # read options from project directory
    $dir = shift;
    $xml = new XML::Simple;
    return $xml->XMLin($dir . "/options.xml");
}

sub dump_vars {
    return Dumper({
        'debug'=>$debug,
        'verbose'=>$verbose,
        'project'=>$project_dir,
        'data'=>$data_dir,
        'amckey'=>$amc_key,
        'gskey'=>$gs_key,
        'qlist'=>$qlist,
        'qmap'=>$qname_map,    
        'gs_path'=>$gs_path
    });
}